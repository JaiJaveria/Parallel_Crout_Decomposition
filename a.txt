switch(num_threads){
case 1:
{
	#pragma omp parallel sections
 	{
		#pragma omp section
		{
			for ( i=j+0*(n-j)/1; i<j+1*(n-j)/1; i++)
			{
 				sum = 0;
				for(k = 0; k < j; k++) {
				sum = sum + L[j][k] * U[k][i];
				}
				if (L[j][j] == 0) {
				// exit(0);
				return;
				}
				U[j][i] = (A[j][i] - sum) / L[j][j];
			}
		}
	}
	break;
}
case 2:
{
	#pragma omp parallel sections
 	{
		#pragma omp section
		{
			for ( i=j+0*(n-j)/2; i<j+1*(n-j)/2; i++)
			{
 				sum = 0;
				for(k = 0; k < j; k++) {
				sum = sum + L[j][k] * U[k][i];
				}
				if (L[j][j] == 0) {
				// exit(0);
				return;
				}
				U[j][i] = (A[j][i] - sum) / L[j][j];
			}
		}
		#pragma omp section
		{
			for ( i=j+1*(n-j)/2; i<j+2*(n-j)/2; i++)
			{
 				sum = 0;
				for(k = 0; k < j; k++) {
				sum = sum + L[j][k] * U[k][i];
				}
				if (L[j][j] == 0) {
				// exit(0);
				return;
				}
				U[j][i] = (A[j][i] - sum) / L[j][j];
			}
		}
	}
	break;
}
case 4:
{
	#pragma omp parallel sections
 	{
		#pragma omp section
		{
			for ( i=j+0*(n-j)/4; i<j+1*(n-j)/4; i++)
			{
 				sum = 0;
				for(k = 0; k < j; k++) {
				sum = sum + L[j][k] * U[k][i];
				}
				if (L[j][j] == 0) {
				// exit(0);
				return;
				}
				U[j][i] = (A[j][i] - sum) / L[j][j];
			}
		}
		#pragma omp section
		{
			for ( i=j+1*(n-j)/4; i<j+2*(n-j)/4; i++)
			{
 				sum = 0;
				for(k = 0; k < j; k++) {
				sum = sum + L[j][k] * U[k][i];
				}
				if (L[j][j] == 0) {
				// exit(0);
				return;
				}
				U[j][i] = (A[j][i] - sum) / L[j][j];
			}
		}
		#pragma omp section
		{
			for ( i=j+2*(n-j)/4; i<j+3*(n-j)/4; i++)
			{
 				sum = 0;
				for(k = 0; k < j; k++) {
				sum = sum + L[j][k] * U[k][i];
				}
				if (L[j][j] == 0) {
				// exit(0);
				return;
				}
				U[j][i] = (A[j][i] - sum) / L[j][j];
			}
		}
		#pragma omp section
		{
			for ( i=j+3*(n-j)/4; i<j+4*(n-j)/4; i++)
			{
 				sum = 0;
				for(k = 0; k < j; k++) {
				sum = sum + L[j][k] * U[k][i];
				}
				if (L[j][j] == 0) {
				// exit(0);
				return;
				}
				U[j][i] = (A[j][i] - sum) / L[j][j];
			}
		}
	}
	break;
}
case 8:
{
	#pragma omp parallel sections
 	{
		#pragma omp section
		{
			for ( i=j+0*(n-j)/8; i<j+1*(n-j)/8; i++)
			{
 				sum = 0;
				for(k = 0; k < j; k++) {
				sum = sum + L[j][k] * U[k][i];
				}
				if (L[j][j] == 0) {
				// exit(0);
				return;
				}
				U[j][i] = (A[j][i] - sum) / L[j][j];
			}
		}
		#pragma omp section
		{
			for ( i=j+1*(n-j)/8; i<j+2*(n-j)/8; i++)
			{
 				sum = 0;
				for(k = 0; k < j; k++) {
				sum = sum + L[j][k] * U[k][i];
				}
				if (L[j][j] == 0) {
				// exit(0);
				return;
				}
				U[j][i] = (A[j][i] - sum) / L[j][j];
			}
		}
		#pragma omp section
		{
			for ( i=j+2*(n-j)/8; i<j+3*(n-j)/8; i++)
			{
 				sum = 0;
				for(k = 0; k < j; k++) {
				sum = sum + L[j][k] * U[k][i];
				}
				if (L[j][j] == 0) {
				// exit(0);
				return;
				}
				U[j][i] = (A[j][i] - sum) / L[j][j];
			}
		}
		#pragma omp section
		{
			for ( i=j+3*(n-j)/8; i<j+4*(n-j)/8; i++)
			{
 				sum = 0;
				for(k = 0; k < j; k++) {
				sum = sum + L[j][k] * U[k][i];
				}
				if (L[j][j] == 0) {
				// exit(0);
				return;
				}
				U[j][i] = (A[j][i] - sum) / L[j][j];
			}
		}
		#pragma omp section
		{
			for ( i=j+4*(n-j)/8; i<j+5*(n-j)/8; i++)
			{
 				sum = 0;
				for(k = 0; k < j; k++) {
				sum = sum + L[j][k] * U[k][i];
				}
				if (L[j][j] == 0) {
				// exit(0);
				return;
				}
				U[j][i] = (A[j][i] - sum) / L[j][j];
			}
		}
		#pragma omp section
		{
			for ( i=j+5*(n-j)/8; i<j+6*(n-j)/8; i++)
			{
 				sum = 0;
				for(k = 0; k < j; k++) {
				sum = sum + L[j][k] * U[k][i];
				}
				if (L[j][j] == 0) {
				// exit(0);
				return;
				}
				U[j][i] = (A[j][i] - sum) / L[j][j];
			}
		}
		#pragma omp section
		{
			for ( i=j+6*(n-j)/8; i<j+7*(n-j)/8; i++)
			{
 				sum = 0;
				for(k = 0; k < j; k++) {
				sum = sum + L[j][k] * U[k][i];
				}
				if (L[j][j] == 0) {
				// exit(0);
				return;
				}
				U[j][i] = (A[j][i] - sum) / L[j][j];
			}
		}
		#pragma omp section
		{
			for ( i=j+7*(n-j)/8; i<j+8*(n-j)/8; i++)
			{
 				sum = 0;
				for(k = 0; k < j; k++) {
				sum = sum + L[j][k] * U[k][i];
				}
				if (L[j][j] == 0) {
				// exit(0);
				return;
				}
				U[j][i] = (A[j][i] - sum) / L[j][j];
			}
		}
	}
	break;
}
case 16:
{
	#pragma omp parallel sections
 	{
		#pragma omp section
		{
			for ( i=j+0*(n-j)/16; i<j+1*(n-j)/16; i++)
			{
 				sum = 0;
				for(k = 0; k < j; k++) {
				sum = sum + L[j][k] * U[k][i];
				}
				if (L[j][j] == 0) {
				// exit(0);
				return;
				}
				U[j][i] = (A[j][i] - sum) / L[j][j];
			}
		}
		#pragma omp section
		{
			for ( i=j+1*(n-j)/16; i<j+2*(n-j)/16; i++)
			{
 				sum = 0;
				for(k = 0; k < j; k++) {
				sum = sum + L[j][k] * U[k][i];
				}
				if (L[j][j] == 0) {
				// exit(0);
				return;
				}
				U[j][i] = (A[j][i] - sum) / L[j][j];
			}
		}
		#pragma omp section
		{
			for ( i=j+2*(n-j)/16; i<j+3*(n-j)/16; i++)
			{
 				sum = 0;
				for(k = 0; k < j; k++) {
				sum = sum + L[j][k] * U[k][i];
				}
				if (L[j][j] == 0) {
				// exit(0);
				return;
				}
				U[j][i] = (A[j][i] - sum) / L[j][j];
			}
		}
		#pragma omp section
		{
			for ( i=j+3*(n-j)/16; i<j+4*(n-j)/16; i++)
			{
 				sum = 0;
				for(k = 0; k < j; k++) {
				sum = sum + L[j][k] * U[k][i];
				}
				if (L[j][j] == 0) {
				// exit(0);
				return;
				}
				U[j][i] = (A[j][i] - sum) / L[j][j];
			}
		}
		#pragma omp section
		{
			for ( i=j+4*(n-j)/16; i<j+5*(n-j)/16; i++)
			{
 				sum = 0;
				for(k = 0; k < j; k++) {
				sum = sum + L[j][k] * U[k][i];
				}
				if (L[j][j] == 0) {
				// exit(0);
				return;
				}
				U[j][i] = (A[j][i] - sum) / L[j][j];
			}
		}
		#pragma omp section
		{
			for ( i=j+5*(n-j)/16; i<j+6*(n-j)/16; i++)
			{
 				sum = 0;
				for(k = 0; k < j; k++) {
				sum = sum + L[j][k] * U[k][i];
				}
				if (L[j][j] == 0) {
				// exit(0);
				return;
				}
				U[j][i] = (A[j][i] - sum) / L[j][j];
			}
		}
		#pragma omp section
		{
			for ( i=j+6*(n-j)/16; i<j+7*(n-j)/16; i++)
			{
 				sum = 0;
				for(k = 0; k < j; k++) {
				sum = sum + L[j][k] * U[k][i];
				}
				if (L[j][j] == 0) {
				// exit(0);
				return;
				}
				U[j][i] = (A[j][i] - sum) / L[j][j];
			}
		}
		#pragma omp section
		{
			for ( i=j+7*(n-j)/16; i<j+8*(n-j)/16; i++)
			{
 				sum = 0;
				for(k = 0; k < j; k++) {
				sum = sum + L[j][k] * U[k][i];
				}
				if (L[j][j] == 0) {
				// exit(0);
				return;
				}
				U[j][i] = (A[j][i] - sum) / L[j][j];
			}
		}
		#pragma omp section
		{
			for ( i=j+8*(n-j)/16; i<j+9*(n-j)/16; i++)
			{
 				sum = 0;
				for(k = 0; k < j; k++) {
				sum = sum + L[j][k] * U[k][i];
				}
				if (L[j][j] == 0) {
				// exit(0);
				return;
				}
				U[j][i] = (A[j][i] - sum) / L[j][j];
			}
		}
		#pragma omp section
		{
			for ( i=j+9*(n-j)/16; i<j+10*(n-j)/16; i++)
			{
 				sum = 0;
				for(k = 0; k < j; k++) {
				sum = sum + L[j][k] * U[k][i];
				}
				if (L[j][j] == 0) {
				// exit(0);
				return;
				}
				U[j][i] = (A[j][i] - sum) / L[j][j];
			}
		}
		#pragma omp section
		{
			for ( i=j+10*(n-j)/16; i<j+11*(n-j)/16; i++)
			{
 				sum = 0;
				for(k = 0; k < j; k++) {
				sum = sum + L[j][k] * U[k][i];
				}
				if (L[j][j] == 0) {
				// exit(0);
				return;
				}
				U[j][i] = (A[j][i] - sum) / L[j][j];
			}
		}
		#pragma omp section
		{
			for ( i=j+11*(n-j)/16; i<j+12*(n-j)/16; i++)
			{
 				sum = 0;
				for(k = 0; k < j; k++) {
				sum = sum + L[j][k] * U[k][i];
				}
				if (L[j][j] == 0) {
				// exit(0);
				return;
				}
				U[j][i] = (A[j][i] - sum) / L[j][j];
			}
		}
		#pragma omp section
		{
			for ( i=j+12*(n-j)/16; i<j+13*(n-j)/16; i++)
			{
 				sum = 0;
				for(k = 0; k < j; k++) {
				sum = sum + L[j][k] * U[k][i];
				}
				if (L[j][j] == 0) {
				// exit(0);
				return;
				}
				U[j][i] = (A[j][i] - sum) / L[j][j];
			}
		}
		#pragma omp section
		{
			for ( i=j+13*(n-j)/16; i<j+14*(n-j)/16; i++)
			{
 				sum = 0;
				for(k = 0; k < j; k++) {
				sum = sum + L[j][k] * U[k][i];
				}
				if (L[j][j] == 0) {
				// exit(0);
				return;
				}
				U[j][i] = (A[j][i] - sum) / L[j][j];
			}
		}
		#pragma omp section
		{
			for ( i=j+14*(n-j)/16; i<j+15*(n-j)/16; i++)
			{
 				sum = 0;
				for(k = 0; k < j; k++) {
				sum = sum + L[j][k] * U[k][i];
				}
				if (L[j][j] == 0) {
				// exit(0);
				return;
				}
				U[j][i] = (A[j][i] - sum) / L[j][j];
			}
		}
		#pragma omp section
		{
			for ( i=j+15*(n-j)/16; i<j+16*(n-j)/16; i++)
			{
 				sum = 0;
				for(k = 0; k < j; k++) {
				sum = sum + L[j][k] * U[k][i];
				}
				if (L[j][j] == 0) {
				// exit(0);
				return;
				}
				U[j][i] = (A[j][i] - sum) / L[j][j];
			}
		}
	}
	break;
}
}
